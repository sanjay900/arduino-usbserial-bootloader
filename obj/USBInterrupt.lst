   1               		.file	"USBInterrupt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.USB_INT_DisableAllInterrupts,"ax",@progbits
  11               	.global	USB_INT_DisableAllInterrupts
  13               	USB_INT_DisableAllInterrupts:
  14               	.LFB64:
  15               		.file 1 "LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c"
   1:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** /*
   2:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****              LUFA Library
   3:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****      Copyright (C) Dean Camera, 2010.
   4:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****               
   5:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****       www.fourwalledcubicle.com
   7:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** */
   8:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
   9:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** /*
  10:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  12:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   software and its documentation for any purpose is hereby granted
  14:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   without fee, provided that the above copyright notice appear in 
  15:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   all copies and that both that the copyright notice and this
  16:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   permission notice and warranty disclaimer appear in supporting 
  17:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   documentation, and that the name of the author not be used in 
  18:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   advertising or publicity pertaining to distribution of the 
  19:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   software without specific, written prior permission.
  20:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  21:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   The author disclaim all warranties with regard to this
  22:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   software, including all implied warranties of merchantability
  23:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   and fitness.  In no event shall the author be liable for any
  24:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   special, indirect or consequential damages or any damages
  25:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   in an action of contract, negligence or other tortious action,
  27:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   arising out of or in connection with the use or performance of
  28:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   this software.
  29:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** */
  30:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  31:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** #include "USBInterrupt.h"
  33:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  34:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** void USB_INT_DisableAllInterrupts(void)
  35:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** {
  16               		.loc 1 35 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  36:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
  37:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));				
  38:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#elif defined(USB_SERIES_4_AVR)
  39:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USBCON &= ~(1 << VBUSTE);
  40:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  41:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
  42:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_HOST)
  43:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UHIEN   = 0;
  44:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	OTGIEN  = 0;
  45:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  46:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
  47:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_DEVICE)
  48:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UDIEN   = 0;
  22               		.loc 1 48 2 view .LVU1
  23               		.loc 1 48 10 is_stmt 0 view .LVU2
  24 0000 1092 E200 		sts 226,__zero_reg__
  25               	/* epilogue start */
  49:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  50:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** }
  26               		.loc 1 50 1 view .LVU3
  27 0004 0895      		ret
  28               		.cfi_endproc
  29               	.LFE64:
  31               		.section	.text.USB_INT_ClearAllInterrupts,"ax",@progbits
  32               	.global	USB_INT_ClearAllInterrupts
  34               	USB_INT_ClearAllInterrupts:
  35               	.LFB65:
  51:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  52:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** void USB_INT_ClearAllInterrupts(void)
  53:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** {
  36               		.loc 1 53 1 is_stmt 1 view -0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  54:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
  55:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USBINT  = 0;
  56:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  57:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
  58:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_HOST)
  59:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UHINT   = 0;
  60:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	OTGINT  = 0;
  61:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  62:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
  63:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_DEVICE)
  64:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UDINT   = 0;
  42               		.loc 1 64 2 view .LVU5
  43               		.loc 1 64 10 is_stmt 0 view .LVU6
  44 0000 1092 E100 		sts 225,__zero_reg__
  45               	/* epilogue start */
  65:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  66:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** }
  46               		.loc 1 66 1 view .LVU7
  47 0004 0895      		ret
  48               		.cfi_endproc
  49               	.LFE65:
  51               		.section	.text.__vector_11,"ax",@progbits
  52               	.global	__vector_11
  54               	__vector_11:
  55               	.LFB66:
  67:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  68:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** ISR(USB_GEN_vect, ISR_BLOCK)
  69:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** {
  56               		.loc 1 69 1 is_stmt 1 view -0
  57               		.cfi_startproc
  58 0000 1F92      		push r1
  59               	.LCFI0:
  60               		.cfi_def_cfa_offset 3
  61               		.cfi_offset 1, -2
  62 0002 0F92      		push r0
  63               	.LCFI1:
  64               		.cfi_def_cfa_offset 4
  65               		.cfi_offset 0, -3
  66 0004 0FB6      		in r0,__SREG__
  67 0006 0F92      		push r0
  68 0008 1124      		clr __zero_reg__
  69 000a 2F93      		push r18
  70               	.LCFI2:
  71               		.cfi_def_cfa_offset 5
  72               		.cfi_offset 18, -4
  73 000c 3F93      		push r19
  74               	.LCFI3:
  75               		.cfi_def_cfa_offset 6
  76               		.cfi_offset 19, -5
  77 000e 4F93      		push r20
  78               	.LCFI4:
  79               		.cfi_def_cfa_offset 7
  80               		.cfi_offset 20, -6
  81 0010 5F93      		push r21
  82               	.LCFI5:
  83               		.cfi_def_cfa_offset 8
  84               		.cfi_offset 21, -7
  85 0012 6F93      		push r22
  86               	.LCFI6:
  87               		.cfi_def_cfa_offset 9
  88               		.cfi_offset 22, -8
  89 0014 7F93      		push r23
  90               	.LCFI7:
  91               		.cfi_def_cfa_offset 10
  92               		.cfi_offset 23, -9
  93 0016 8F93      		push r24
  94               	.LCFI8:
  95               		.cfi_def_cfa_offset 11
  96               		.cfi_offset 24, -10
  97 0018 9F93      		push r25
  98               	.LCFI9:
  99               		.cfi_def_cfa_offset 12
 100               		.cfi_offset 25, -11
 101 001a AF93      		push r26
 102               	.LCFI10:
 103               		.cfi_def_cfa_offset 13
 104               		.cfi_offset 26, -12
 105 001c BF93      		push r27
 106               	.LCFI11:
 107               		.cfi_def_cfa_offset 14
 108               		.cfi_offset 27, -13
 109 001e EF93      		push r30
 110               	.LCFI12:
 111               		.cfi_def_cfa_offset 15
 112               		.cfi_offset 30, -14
 113 0020 FF93      		push r31
 114               	.LCFI13:
 115               		.cfi_def_cfa_offset 16
 116               		.cfi_offset 31, -15
 117               	/* prologue: Signal */
 118               	/* frame size = 0 */
 119               	/* stack size = 15 */
 120               	.L__stack_usage = 15
  70:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_DEVICE)
  71:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
  72:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
  73:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
  74:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_VBUS);
  75:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  76:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (USB_VBUS_GetStatus())
  77:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		{
  78:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			USB_DeviceState = DEVICE_STATE_Powered;
  79:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			EVENT_USB_Device_Connect();
  80:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		}
  81:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		else
  82:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		{
  83:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			USB_DeviceState = DEVICE_STATE_Unattached;		
  84:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			EVENT_USB_Device_Disconnect();
  85:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		}
  86:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
  87:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  88:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  89:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 121               		.loc 1 89 2 view .LVU9
 122               		.loc 1 89 6 is_stmt 0 view .LVU10
 123 0022 8091 E100 		lds r24,225
 124               		.loc 1 89 5 view .LVU11
 125 0026 80FF      		sbrs r24,0
 126 0028 00C0      		rjmp .L4
 127               		.loc 1 89 46 discriminator 1 view .LVU12
 128 002a 8091 E200 		lds r24,226
 129               		.loc 1 89 43 discriminator 1 view .LVU13
 130 002e 80FF      		sbrs r24,0
 131 0030 00C0      		rjmp .L4
  90:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
  91:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SUSPEND);
 132               		.loc 1 91 3 is_stmt 1 view .LVU14
 133               		.loc 1 91 3 view .LVU15
 134 0032 8091 E100 		lds r24,225
 135 0036 8E7F      		andi r24,lo8(-2)
 136 0038 8093 E100 		sts 225,r24
 137               		.loc 1 91 3 view .LVU16
  92:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  93:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_SUSPEND);
 138               		.loc 1 93 3 view .LVU17
 139               		.loc 1 93 3 view .LVU18
 140 003c 8091 E200 		lds r24,226
 141 0040 8E7F      		andi r24,lo8(-2)
 142 0042 8093 E200 		sts 226,r24
 143               		.loc 1 93 3 view .LVU19
  94:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_WAKEUP);
 144               		.loc 1 94 3 view .LVU20
 145               		.loc 1 94 3 view .LVU21
 146 0046 8091 E200 		lds r24,226
 147 004a 8061      		ori r24,lo8(16)
 148 004c 8093 E200 		sts 226,r24
 149               		.loc 1 94 3 view .LVU22
  95:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		
  96:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_CLK_Freeze();
 150               		.loc 1 96 3 view .LVU23
 151               	.LBB54:
 152               	.LBI54:
 153               		.file 2 "LUFA/LUFA/Drivers/USB/LowLevel/USBController.h"
   1:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /*
   2:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****              LUFA Library
   3:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****      Copyright (C) Dean Camera, 2010.
   4:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****               
   5:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****       www.fourwalledcubicle.com
   7:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** */
   8:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
   9:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /*
  10:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  12:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   without fee, provided that the above copyright notice appear in 
  15:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   all copies and that both that the copyright notice and this
  16:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   permission notice and warranty disclaimer appear in supporting 
  17:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   documentation, and that the name of the author not be used in 
  18:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   advertising or publicity pertaining to distribution of the 
  19:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software without specific, written prior permission.
  20:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  21:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   The author disclaim all warranties with regard to this
  22:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software, including all implied warranties of merchantability
  23:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   special, indirect or consequential damages or any damages
  25:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   arising out of or in connection with the use or performance of
  28:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   this software.
  29:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** */
  30:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  31:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /** \file
  32:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \brief USB low level USB controller definitions.
  33:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  34:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  This file contains structures, function prototypes and macros related to the low level configur
  35:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  USB controller, to start, stop and reset the USB library core.
  36:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  37:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  40:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  
  41:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /** \ingroup Group_USB
  42:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @defgroup Group_USBManagement USB Interface Management
  43:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  44:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  45:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  46:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @{
  47:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  48:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  49:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** #ifndef __USBCONTROLLER_H__
  50:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** #define __USBCONTROLLER_H__
  51:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  52:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Includes: */
  53:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/io.h>
  54:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/interrupt.h>
  55:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <stdbool.h>
  56:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  57:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  58:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  59:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../../../Common/Common.h"
  60:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  61:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/Events.h"
  62:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBTask.h"
  63:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "USBInterrupt.h"
  64:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  65:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  66:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Host.h"
  67:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Pipe.h"
  68:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "OTG.h"
  69:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/HostStandardReq.h"
  70:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  71:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  72:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  73:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Device.h"
  74:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Endpoint.h"
  75:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/DeviceStandardReq.h"
  76:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  77:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  78:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Enable C linkage for C++ Compilers: */
  79:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(__cplusplus)
  80:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			extern "C" {
  81:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  82:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  83:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Preprocessor Checks and Defines: */
  84:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  85:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  86:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  87:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  88:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(F_CLOCK)
  89:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error F_CLOCK is not defined. You must define F_CLOCK to the frequency of the unprescaled input
  90:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  91:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	
  92:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if (F_CLOCK == 8000000)
  93:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  94:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  95:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
  96:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  97:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  98:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  99:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
 100:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 101:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
 102:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 103:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 104:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#elif (F_CLOCK == 16000000)
 105:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 106:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 107:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
 108:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 109:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 110:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 111:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 112:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 113:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 114:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 115:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 116:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 117:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 118:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(USB_PLL_PSC)
 119:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error No PLL prescale value available for chosen F_CPU value and AVR model.
 120:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 121:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 122:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Public Interface - May be used in end-application: */
 123:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Macros: */
 124:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global. This indicates that the USB interface is curr
 125:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  initialized into any mode.
 126:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 127:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_NONE                      0
 128:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 129:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global and the \ref USB_Init() function. This indicat
 130:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB interface is or should be initialized in the USB device mode.
 131:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 132:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_DEVICE                    1
 133:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 134:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global and the \ref USB_Init() function. This indicat
 135:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB interface is or should be initialized in the USB host mode.
 136:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 137:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_HOST                      2
 138:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 139:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 140:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Mode mask for the the \ref USB_Init() function. This indicates that the USB interface shoul
 141:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  initialized into whatever mode the UID pin of the USB AVR indicates, and that the device
 142:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  should swap over its mode when the level of the UID pin changes during operation.
 143:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 144:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This token is not available on AVR models which do not support both host and device m
 145:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 146:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_MODE_UID                       3
 147:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 148:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 149:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 150:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be enabled to regulate the data pin voltages to within the USB standard.
 151:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 152:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 153:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 154:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 155:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 156:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 157:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 158:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 159:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 160:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 161:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 162:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 163:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 164:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 165:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 166:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 167:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 168:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 169:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 170:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 171:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 172:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 173:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 174:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 175:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a CONTROL type endpoint or pipe.
 176:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 177:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 178:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 179:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_CONTROL                    0x00
 180:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 181:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an ISOCHRONOUS type endpoint or pipe.
 182:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 183:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 184:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 185:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_ISOCHRONOUS                0x01
 186:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 187:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a BULK type endpoint or pipe.
 188:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 189:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 190:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 191:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_BULK                       0x02
 192:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 193:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an INTERRUPT type endpoint or pipe.
 194:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 195:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 196:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 197:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_INTERRUPT                  0x03
 198:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 199:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 200:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 201:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 202:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 203:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 204:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  This value may be overridden in the user project makefile as the value of the 
 205:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 206:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 207:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 208:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 209:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 210:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 211:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 212:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Returns boolean true if the VBUS line is currently high (i.e. the USB host is supplying pow
 213:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  otherwise returns false.
 214:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 215:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 216:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 217:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 218:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void)
 219:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				{
 220:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 221:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				}
 222:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 223:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 224:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 225:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 226:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 227:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 228:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 229:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void)
 230:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 231:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  |=  (1 << DETACH);
 232:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 233:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 234:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Attaches the device to the USB bus. This announces the device's presence to any attached
 235:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB host, starting the enumeration process. If no host is present, attaching the device
 236:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will allow for enumeration once a host is connected to the device.
 237:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 238:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  This is inexplicably also required for proper operation while in host mode, to enable the
 239:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attachment of a device to the host. This is despite the bit being located in the device-mode
 240:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  register and despite the datasheet making no mention of its requirement in host mode.
 241:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 242:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
 243:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void)
 244:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 245:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  &= ~(1 << DETACH);
 246:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 247:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 248:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Function Prototypes: */
 249:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Main function to initialize and start the USB interface. Once active, the USB interface will
 250:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  allow for device connection to a host when in device mode, or for device enumeration while i
 251:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  host mode.
 252:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 253:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  As the USB library relies on interrupts for the device and host mode enumeration processes,
 254:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  the user must enable global interrupts before or shortly after this function is called. In
 255:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  device mode, interrupts must be enabled within 500ms of this function being called to ensure
 256:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the host does not time out whilst enumerating the device. In host mode, interrupts may 
 257:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enabled at the application's leisure however enumeration will not begin of an attached devic
 258:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  until after this has occurred.
 259:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 260:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  Calling this function when the USB interface is already initialized will cause a complete US
 261:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  interface reset and re-enumeration.
 262:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 263:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Mode     This is a mask indicating what mode the USB interface is to be initializ
 264:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      Valid mode masks are \ref USB_MODE_DEVICE, \ref USB_MODE_HOST or \ref US
 265:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 266:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Options  Mask indicating the options which should be used when initializing the U
 267:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      interface to control the USB interface's behaviour. This should be compr
 268:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      a USB_OPT_REG_* mask to control the regulator, a USB_OPT_*_PLL mask to c
 269:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      PLL, and a USB_DEVICE_OPT_* mask (when the device mode is enabled) to se
 270:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      mode speed.
 271:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 272:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only device or host mode is require
 273:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the mode can be statically set in the project makefile by defining the token USB_DEVIC
 274:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        (for device mode) or USB_HOST_ONLY (for host mode), passing the token to the compiler 
 275:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        via the -D switch. If the mode is statically set, this parameter does not exist in the
 276:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        function prototype.
 277:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 278:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 279:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only fixed settings are are require
 280:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the options may be set statically in the same manner as the mode (see the Mode paramet
 281:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        this function). To statically set the USB options, pass in the USE_STATIC_OPTIONS toke
 282:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        defined to the appropriate options masks. When the options are statically set, this
 283:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        parameter does not exist in the function prototype.
 284:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 285:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        
 286:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note The mode parameter does not exist on devices where only one mode is possible, such as 
 287:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        AVR models which only implement the USB device mode in hardware.
 288:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 289:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \see Device.h for the USB_DEVICE_OPT_* masks.
 290:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 291:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_Init(
 292:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 293:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Mode
 294:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 295:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 296:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS)) || defined(__DOXYG
 297:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               ,
 298:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
 299:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               void
 300:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 301:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 302:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 303:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Options
 304:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 305:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               );
 306:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 307:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Shuts down the USB interface. This turns off the USB interface after deallocating all USB FI
 308:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  memory, endpoints and pipes. When turned off, no USB functionality can be used until the int
 309:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  is restarted with the \ref USB_Init() function.
 310:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 311:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ShutDown(void);
 312:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 313:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Resets the interface, when already initialized. This will re-enumerate the device if already
 314:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  to a host, or re-enumerate an already attached device when in host mode.
 315:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 316:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ResetInterface(void);
 317:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 318:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Enums: */
 319:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Enum for error codes relating to the powering on of the USB interface. These error codes are
 320:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  used in the ErrorCode parameter value of the \ref EVENT_USB_InitFailure() event.
 321:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 322:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			enum USB_InitErrorCodes_t
 323:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 324:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_INITERROR_NoUSBModeSpecified       = 0, /**< Indicates that \ref USB_Init() was called with
 325:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				                                             *   invalid or missing Mode parameter.
 326:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				                                             */
 327:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			};
 328:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 329:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Global Variables: */
 330:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY)) || defined(__DOXYGEN__)
 331:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the mode that the USB interface is currently initialized to. This value will be
 332:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  one of the USB_MODE_* masks defined elsewhere in this module.
 333:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 334:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 335:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 336:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 337:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_CurrentMode;
 338:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_HOST_ONLY)
 339:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_HOST
 340:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_DEVICE_ONLY)
 341:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_DEVICE
 342:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 343:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 344:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 345:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the current USB options that the USB interface was initialized with when \ref USB
 346:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  was called. This value will be one of the USB_MODE_* masks defined elsewhere in this module
 347:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 348:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 349:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 350:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 351:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_Options;
 352:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USE_STATIC_OPTIONS)
 353:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_Options USE_STATIC_OPTIONS
 354:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 355:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 356:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Private Interface - For use in library only: */
 357:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	#if !defined(__DOXYGEN__)
 358:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 359:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
 360:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void)
 361:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 362:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = USB_PLL_PSC;
 363:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
 364:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 365:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 366:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
 367:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void)
 368:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 369:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
 370:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 371:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 372:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 373:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void)
 374:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 375:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				return ((PLLCSR  &   (1 << PLOCK)) ? true : false);
 376:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 377:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 378:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
 379:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void)
 380:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 381:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 382:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  |=  (1 << UVREGE);
 383:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 384:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   &= ~(1 << REGDIS);
 385:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 386:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 387:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 388:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
 389:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void)
 390:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 391:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 392:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  &= ~(1 << UVREGE);
 393:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 394:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   |=  (1 << REGDIS);
 395:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 396:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 397:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 398:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 399:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
 400:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void)
 401:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 402:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << OTGPADE);
 403:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 404:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 405:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
 406:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void)
 407:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 408:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << OTGPADE);
 409:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 410:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 411:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 412:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
 413:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void)
 154               		.loc 2 413 23 view .LVU24
 155               	.LBB55:
 414:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 415:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << FRZCLK);
 156               		.loc 2 415 5 view .LVU25
 157               		.loc 2 415 13 is_stmt 0 view .LVU26
 158 0050 8091 D800 		lds r24,216
 159 0054 8062      		ori r24,lo8(32)
 160 0056 8093 D800 		sts 216,r24
 161               	.LBE55:
 162               	.LBE54:
  97:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		
  98:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (!(USB_Options & USB_OPT_MANUAL_PLL))
 163               		.loc 1 98 3 is_stmt 1 view .LVU27
  99:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  USB_PLL_Off();
 164               		.loc 1 99 5 view .LVU28
 165               	.LBB56:
 166               	.LBI56:
 367:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 167               		.loc 2 367 23 view .LVU29
 168               	.LBB57:
 369:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 169               		.loc 2 369 5 view .LVU30
 369:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 170               		.loc 2 369 13 is_stmt 0 view .LVU31
 171 005a 19BC      		out 0x29,__zero_reg__
 172               	.LBE57:
 173               	.LBE56:
 100:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 101:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
 102:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState = DEVICE_STATE_Unattached;
 174               		.loc 1 102 3 is_stmt 1 view .LVU32
 175               		.loc 1 102 19 is_stmt 0 view .LVU33
 176 005c 1EBA      		out 0x1e,__zero_reg__
 103:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Disconnect();
 177               		.loc 1 103 3 is_stmt 1 view .LVU34
 178 005e 0E94 0000 		call EVENT_USB_Device_Disconnect
 179               	.LVL0:
 180               	.L4:
 104:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#else
 105:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState = DEVICE_STATE_Suspended;
 106:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Suspend();
 107:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#endif
 108:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 109:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 110:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 181               		.loc 1 110 2 view .LVU35
 182               		.loc 1 110 6 is_stmt 0 view .LVU36
 183 0062 8091 E100 		lds r24,225
 184               		.loc 1 110 5 view .LVU37
 185 0066 84FF      		sbrs r24,4
 186 0068 00C0      		rjmp .L5
 187               		.loc 1 110 45 discriminator 1 view .LVU38
 188 006a 8091 E200 		lds r24,226
 189               		.loc 1 110 42 discriminator 1 view .LVU39
 190 006e 84FF      		sbrs r24,4
 191 0070 00C0      		rjmp .L5
 111:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 112:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (!(USB_Options & USB_OPT_MANUAL_PLL))
 192               		.loc 1 112 3 is_stmt 1 view .LVU40
 113:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		{
 114:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			USB_PLL_On();
 193               		.loc 1 114 4 view .LVU41
 194               	.LBB58:
 195               	.LBI58:
 360:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 196               		.loc 2 360 23 view .LVU42
 197               	.LBB59:
 362:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
 198               		.loc 2 362 5 view .LVU43
 362:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
 199               		.loc 2 362 13 is_stmt 0 view .LVU44
 200 0072 84E0      		ldi r24,lo8(4)
 201 0074 89BD      		out 0x29,r24
 363:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 202               		.loc 2 363 5 is_stmt 1 view .LVU45
 363:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 203               		.loc 2 363 12 is_stmt 0 view .LVU46
 204 0076 89B5      		in r24,0x29
 205 0078 8260      		ori r24,lo8(2)
 206 007a 89BD      		out 0x29,r24
 207               	.L6:
 208               	.LBE59:
 209               	.LBE58:
 115:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			while (!(USB_PLL_IsReady()));
 210               		.loc 1 115 32 is_stmt 1 discriminator 1 view .LVU47
 211               		.loc 1 115 10 discriminator 1 view .LVU48
 212               	.LBB60:
 213               	.LBI60:
 373:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 214               		.loc 2 373 23 discriminator 1 view .LVU49
 215               	.LBB61:
 375:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 216               		.loc 2 375 5 discriminator 1 view .LVU50
 217               	.LBE61:
 218               	.LBE60:
 219               		.loc 1 115 10 is_stmt 0 discriminator 1 view .LVU51
 220 007c 09B4      		in __tmp_reg__,0x29
 221 007e 00FE      		sbrs __tmp_reg__,0
 222 0080 00C0      		rjmp .L6
 116:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		}
 117:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 118:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_CLK_Unfreeze();
 223               		.loc 1 118 3 is_stmt 1 view .LVU52
 224               	.LBB62:
 225               	.LBI62:
 416:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 417:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 418:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
 419:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void)
 226               		.loc 2 419 23 view .LVU53
 227               	.LBB63:
 420:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 421:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << FRZCLK);
 228               		.loc 2 421 5 view .LVU54
 229               		.loc 2 421 13 is_stmt 0 view .LVU55
 230 0082 8091 D800 		lds r24,216
 231 0086 8F7D      		andi r24,lo8(-33)
 232 0088 8093 D800 		sts 216,r24
 233               	.LBE63:
 234               	.LBE62:
 119:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 120:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_WAKEUP);
 235               		.loc 1 120 3 is_stmt 1 view .LVU56
 236               		.loc 1 120 3 view .LVU57
 237 008c 8091 E100 		lds r24,225
 238 0090 8F7E      		andi r24,lo8(-17)
 239 0092 8093 E100 		sts 225,r24
 240               		.loc 1 120 3 view .LVU58
 121:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 122:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_WAKEUP);
 241               		.loc 1 122 3 view .LVU59
 242               		.loc 1 122 3 view .LVU60
 243 0096 8091 E200 		lds r24,226
 244 009a 8F7E      		andi r24,lo8(-17)
 245 009c 8093 E200 		sts 226,r24
 246               		.loc 1 122 3 view .LVU61
 123:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_SUSPEND);
 247               		.loc 1 123 3 view .LVU62
 248               		.loc 1 123 3 view .LVU63
 249 00a0 8091 E200 		lds r24,226
 250 00a4 8160      		ori r24,lo8(1)
 251 00a6 8093 E200 		sts 226,r24
 252               		.loc 1 123 3 view .LVU64
 124:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		
 125:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
 126:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 253               		.loc 1 126 3 view .LVU65
 254               		.loc 1 126 19 is_stmt 0 view .LVU66
 255 00aa 8091 0000 		lds r24,USB_ConfigurationNumber
 256 00ae 8111      		cpse r24,__zero_reg__
 257 00b0 00C0      		rjmp .L10
 258 00b2 81E0      		ldi r24,lo8(1)
 259               	.L7:
 260               		.loc 1 126 19 discriminator 4 view .LVU67
 261 00b4 8EBB      		out 0x1e,r24
 127:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Connect();
 262               		.loc 1 127 3 is_stmt 1 discriminator 4 view .LVU68
 263 00b6 0E94 0000 		call EVENT_USB_Device_Connect
 264               	.LVL1:
 265               	.L5:
 128:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#else
 129:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 130:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_WakeUp();		
 131:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#endif
 132:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 133:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****    
 134:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 266               		.loc 1 134 2 view .LVU69
 267               		.loc 1 134 6 is_stmt 0 view .LVU70
 268 00ba 8091 E100 		lds r24,225
 269               		.loc 1 134 5 view .LVU71
 270 00be 83FF      		sbrs r24,3
 271 00c0 00C0      		rjmp .L8
 272               		.loc 1 134 45 discriminator 1 view .LVU72
 273 00c2 8091 E200 		lds r24,226
 274               		.loc 1 134 42 discriminator 1 view .LVU73
 275 00c6 83FF      		sbrs r24,3
 276 00c8 00C0      		rjmp .L8
 135:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 136:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_EORSTI);
 277               		.loc 1 136 3 is_stmt 1 view .LVU74
 278               		.loc 1 136 3 view .LVU75
 279 00ca 8091 E100 		lds r24,225
 280 00ce 877F      		andi r24,lo8(-9)
 281 00d0 8093 E100 		sts 225,r24
 282               		.loc 1 136 3 view .LVU76
 137:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 138:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState         = DEVICE_STATE_Default;
 283               		.loc 1 138 3 view .LVU77
 284               		.loc 1 138 27 is_stmt 0 view .LVU78
 285 00d4 82E0      		ldi r24,lo8(2)
 286 00d6 8EBB      		out 0x1e,r24
 139:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ConfigurationNumber = 0;
 287               		.loc 1 139 3 is_stmt 1 view .LVU79
 288               		.loc 1 139 27 is_stmt 0 view .LVU80
 289 00d8 1092 0000 		sts USB_ConfigurationNumber,__zero_reg__
 140:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 141:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SUSPEND);
 290               		.loc 1 141 3 is_stmt 1 view .LVU81
 291               		.loc 1 141 3 view .LVU82
 292 00dc 8091 E100 		lds r24,225
 293 00e0 8E7F      		andi r24,lo8(-2)
 294 00e2 8093 E100 		sts 225,r24
 295               		.loc 1 141 3 view .LVU83
 142:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_SUSPEND);
 296               		.loc 1 142 3 view .LVU84
 297               		.loc 1 142 3 view .LVU85
 298 00e6 8091 E200 		lds r24,226
 299 00ea 8E7F      		andi r24,lo8(-2)
 300 00ec 8093 E200 		sts 226,r24
 301               		.loc 1 142 3 view .LVU86
 143:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_WAKEUP);
 302               		.loc 1 143 3 view .LVU87
 303               		.loc 1 143 3 view .LVU88
 304 00f0 8091 E200 		lds r24,226
 305 00f4 8061      		ori r24,lo8(16)
 306 00f6 8093 E200 		sts 226,r24
 307               		.loc 1 143 3 view .LVU89
 144:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 145:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		Endpoint_ClearEndpoints();
 308               		.loc 1 145 3 view .LVU90
 309 00fa 0E94 0000 		call Endpoint_ClearEndpoints
 310               	.LVL2:
 146:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 147:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
 311               		.loc 1 147 3 view .LVU91
 312               	.LBB64:
 313               	.LBI64:
 314               		.file 3 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h"
   1:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /*
   2:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****               
   5:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** */
   8:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
   9:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /*
  10:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  12:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in 
  15:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting 
  17:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in 
  18:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the 
  19:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  21:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** */
  30:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  31:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  34:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  37:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  40:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  41:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  42:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  43:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  44:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  45:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  46:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  47:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  48:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @{
  49:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  50:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  51:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  52:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  53:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  54:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  55:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  
  56:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  57:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  58:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  59:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  60:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  61:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */ 
  62:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  63:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  64:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointStreamRW Read/Write of Multi-Byte Streams
  65:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  66:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of data strea
  67:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  and to endpoints.
  68:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */ 
  69:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  70:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  71:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  72:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  73:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  74:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  75:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  76:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  77:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  78:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  79:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  80:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/pgmspace.h>
  81:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/eeprom.h>
  82:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  83:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  84:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  85:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  86:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  87:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  88:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
  89:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#include "../HighLevel/StreamCallbacks.h"
  90:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  91:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		
  92:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  93:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  94:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  95:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  96:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  97:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  98:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  99:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
 100:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#endif
 101:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		
 102:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 103:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 104:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 105:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 106:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 107:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                      (0 << EPDIR)
 108:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 109:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 110:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 111:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 112:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                       (1 << EPDIR)
 113:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 114:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 115:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 116:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 117:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 118:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 119:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                  (0 << EPBK0)
 120:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 121:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 122:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 123:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 124:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 125:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 126:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                  (1 << EPBK0)
 127:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 128:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 129:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 130:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 131:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                    0
 132:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 133:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 134:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 135:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 136:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 */
 137:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE   8
 138:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 139:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 140:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 141:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 142:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 143:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                   0x07
 144:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 145:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 146:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 147:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 148:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                   0x80
 149:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 150:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 151:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 152:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 153:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                  0x7F
 154:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 155:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 156:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 157:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 158:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */				
 159:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(n)                  _ENDPOINT_GET_MAXSIZE(n)
 160:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 161:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates if the given endpoint supports double banking.
 162:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 163:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 164:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */				
 165:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DOUBLEBANK_SUPPORTED(n)      _ENDPOINT_GET_DOUBLEBANK(n)
 166:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 167:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE)
 168:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 169:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 170:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 171:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 172:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					 */
 173:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      7
 174:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#else
 175:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      5
 176:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 177:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
 178:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS          1
 179:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 180:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 181:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 182:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 183:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 184:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 185:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 186:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 187:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 188:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 189:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 190:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 191:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 192:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 193:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 194:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 195:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 196:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 197:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 198:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 199:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 200:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 201:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 202:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 203:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			};
 204:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		
 205:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Stream_* functions.
 206:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 207:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 208:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 209:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_Stream_RW_ErrorCodes_t
 210:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 211:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 212:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_EndpointStalled    = 1, /**< The endpoint was stalled during the stream
 213:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   transfer by the host or device.
 214:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 215:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 216:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   the transfer.
 217:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 218:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 219:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   no USB endpoint traffic can occur until the bus
 220:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   has resumed.
 221:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 222:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_Timeout            = 4, /**< The host failed to accept or send the next packe
 223:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   within the software timeout period set by the
 224:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   \ref USB_STREAM_TIMEOUT_MS macro.
 225:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 226:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_CallbackAborted    = 5, /**< Indicates that the stream's callback function
 227:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                               *   aborted the transfer early.
 228:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 229:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			};
 230:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 231:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Control_Stream_* functions..
 232:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 233:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 234:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 235:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_ControlStream_RW_ErrorCodes_t
 236:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 237:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 238:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_HostAborted        = 1, /**< The aborted the transfer prematurely. */
 239:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 240:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   the transfer.
 241:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 242:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 243:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   no USB endpoint traffic can occur until the bus
 244:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   has resumed.
 245:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 246:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			};
 247:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 248:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 249:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 250:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 252:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 253:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 255:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 256:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 257:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 258:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 259:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 260:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 261:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 262:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 263:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 264:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 265:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 266:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 267:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 268:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 269:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		
 270:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 271:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 272:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 273:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 274:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 275:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 276:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 277:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 278:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 279:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 280:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 281:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#else
 282:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 283:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 284:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 285:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 286:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 287:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 288:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 289:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 290:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 291:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 292:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 293:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 294:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 295:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 296:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 297:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 298:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 300:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 301:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 302:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 303:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 304:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 305:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 307:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 308:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 309:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 310:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 311:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 312:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 313:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 314:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 315:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 316:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 317:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 318:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 319:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 320:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 321:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 322:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 323:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 324:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 325:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 326:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 327:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 328:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 329:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 330:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 331:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 332:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 333:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 334:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 335:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 336:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 337:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 338:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 339:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 340:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 341:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 342:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 343:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 344:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 345:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 346:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 347:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 348:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 349:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 350:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 351:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 352:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 353:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 354:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 355:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 356:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 357:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 358:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 359:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 360:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 361:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 362:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 363:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 364:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 365:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 366:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 367:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 368:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 369:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 370:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 371:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 372:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 373:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 374:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 375:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 376:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 377:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 378:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 379:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 380:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 381:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 382:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 383:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 384:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 385:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 386:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 387:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 388:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 389:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 390:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 391:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 392:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 393:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 394:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 395:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 396:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet.
 397:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 398:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 399:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 400:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 401:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 402:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 403:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 404:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 405:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI))  ? true : false);
 406:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 407:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 408:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet.
 409:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 410:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 411:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 412:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 413:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 414:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 415:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 416:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 417:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 418:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 419:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 420:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 421:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 422:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 423:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 424:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 425:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 426:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 427:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 428:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 429:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 430:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 431:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 432:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 433:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 434:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 435:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 436:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 437:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints. 
 438:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 439:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 440:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 441:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 442:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 443:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 444:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 445:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 446:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 447:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 448:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 449:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 450:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 451:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 452:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 453:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 454:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 455:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#else
 456:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 457:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 458:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 459:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 460:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 461:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 462:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 463:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 464:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 465:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 466:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 467:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 468:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 469:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 470:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#else
 471:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);	
 472:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 473:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 474:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 475:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 476:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 477:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 478:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 479:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 480:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 481:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 482:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 483:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 484:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 485:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 486:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 487:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 488:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 489:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 490:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 491:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 492:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 493:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 494:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 495:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 496:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 497:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 498:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 499:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 500:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 501:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 502:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 503:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 504:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 505:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 506:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 507:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 508:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 509:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 510:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 511:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 512:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 513:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 514:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 515:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 516:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 517:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 518:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 519:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 520:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 521:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 522:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 523:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 524:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 525:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 526:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 527:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 528:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 529:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 530:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 531:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 532:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 533:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 534:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 535:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 536:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 537:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 538:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 539:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 540:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 541:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 542:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 543:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 544:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 545:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 546:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 547:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 548:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 549:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 550:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
 551:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 552:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 553:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 554:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 555:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 556:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 557:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 558:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 559:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 560:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 561:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 562:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 563:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 564:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 565:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 566:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 567:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 568:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 569:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
 570:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void)
 571:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 572:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 573:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
 574:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 575:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 576:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 577:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 578:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 579:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 580:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 581:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 582:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 583:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 584:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 585:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void)
 586:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 587:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				union
 588:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
 589:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 590:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 591:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 592:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
 593:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 594:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 595:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 596:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 597:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 598:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 599:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 600:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 601:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 602:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 603:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 604:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 605:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 606:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 607:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void)
 608:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 609:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				union
 610:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
 611:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 612:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 613:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 614:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
 615:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 616:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 617:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 618:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 619:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 620:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 621:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 622:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 623:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 624:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 625:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 626:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 627:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 628:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 629:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
 630:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 631:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 632:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 633:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 634:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 635:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in big endian format, for IN
 636:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 637:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 638:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 639:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 640:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 641:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 642:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_BE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 643:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_BE(const uint16_t Word)
 644:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 645:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 646:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 647:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 648:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 649:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards two bytes from the currently selected endpoint's bank, for OUT direction endpoints.
 650:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 651:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 652:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 653:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Word(void) ATTR_ALWAYS_INLINE;
 654:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Word(void)
 655:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 656:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 657:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
 658:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 659:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 660:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 661:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 662:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads four bytes from the currently selected endpoint's bank in little endian format, for OU
 663:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 664:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 665:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 666:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 667:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next double word in the currently selected endpoint's FIFO buffer.
 668:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 669:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 670:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_LE(void)
 671:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 672:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				union
 673:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
 674:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint32_t DWord;
 675:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[4];
 676:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 677:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
 678:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 679:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 680:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[2] = UEDATX;
 681:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[3] = UEDATX;
 682:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 683:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return Data.DWord;
 684:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 685:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 686:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads four bytes from the currently selected endpoint's bank in big endian format, for OUT
 687:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 688:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 689:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 690:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 691:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next double word in the currently selected endpoint's FIFO buffer.
 692:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 693:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 694:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_BE(void)
 695:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 696:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				union
 697:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
 698:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint32_t DWord;
 699:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[4];
 700:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 701:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
 702:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[3] = UEDATX;
 703:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[2] = UEDATX;
 704:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 705:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 706:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 707:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return Data.DWord;
 708:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 709:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 710:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes four bytes to the currently selected endpoint's bank in little endian format, for IN
 711:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 712:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 713:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 714:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 715:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
 716:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 717:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_LE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
 718:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_LE(const uint32_t DWord)
 719:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 720:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord &  0xFF);
 721:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 8);
 722:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 16);
 723:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 24);
 724:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 725:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 726:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes four bytes to the currently selected endpoint's bank in big endian format, for IN
 727:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 728:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 729:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 730:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 731:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
 732:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 733:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
 734:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord)
 735:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 736:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 24);
 737:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 16);
 738:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 8);
 739:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord &  0xFF);
 740:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 741:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 742:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards four bytes from the currently selected endpoint's bank, for OUT direction endpoints
 743:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 744:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 745:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 746:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_DWord(void) ATTR_ALWAYS_INLINE;
 747:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_DWord(void)
 748:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 749:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 750:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
 751:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 752:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 753:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 754:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 755:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 756:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 757:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* External Variables: */
 758:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Global indicating the maximum packet size of the default control endpoint located at address
 759:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  0 in the device. This value is set to the value indicated in the device descriptor in the us
 760:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  project once the USB interface is initialized into device mode.
 761:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 762:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  If space is an issue, it is possible to fix this to a static value by defining the control
 763:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint size in the FIXED_CONTROL_ENDPOINT_SIZE token passed to the compiler in the makefil
 764:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  via the -D switch. When a fixed control endpoint size is used, the size is no longer dynamic
 765:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  read from the descriptors at runtime and instead fixed to the given value. When used, it is
 766:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  important that the descriptor control endpoint size value matches the size given as the
 767:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  FIXED_CONTROL_ENDPOINT_SIZE token - it is recommended that the FIXED_CONTROL_ENDPOINT_SIZE t
 768:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  be used in the descriptors to ensure this.
 769:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 770:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This variable should be treated as read-only in the user application, and never manual
 771:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        changed in value.
 772:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 773:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 774:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				extern uint8_t USB_ControlEndpointSize;
 775:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
 776:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define USB_ControlEndpointSize FIXED_CONTROL_ENDPOINT_SIZE
 777:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 778:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 779:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 780:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
 781:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define __CALLBACK_PARAM     , StreamCallbackPtr_t Callback
 782:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
 783:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define __CALLBACK_PARAM
 784:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 785:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		
 786:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 787:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Endpoints should be allocated in ascending order by their address in the
 788:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  device (i.e. endpoint 1 should be configured before endpoint 2 and so on) to prevent fragmen
 789:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  of the USB FIFO memory.
 790:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 791:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  The endpoint type may be one of the EP_TYPE_* macros listed in LowLevel.h and the direction
 792:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  may be either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT_DIR_IN.
 793:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 794:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  The bank size must indicate the maximum packet size that the endpoint can handle. Different
 795:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint numbers can handle different maximum packet sizes - refer to the chosen USB AVR's
 796:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  datasheet to determine the maximum bank size for each endpoint.
 797:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 798:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  The banking mode may be either \ref ENDPOINT_BANK_SINGLE or \ref ENDPOINT_BANK_DOUBLE.
 799:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 800:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 801:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 802:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 803:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 804:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will select the specified endpoint, and the endpoint will remain selected
 805:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        once the routine completes regardless of if the endpoint configuration succeeds.
 806:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 807:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 808:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 809:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint(const uint8_t  Number,
 810:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Type,
 811:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Direction,
 812:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint16_t Size,
 813:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Banks);
 814:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 815:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Spin-loops until the currently selected non-control endpoint is ready for the next packet of
 816:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  to be read or written to it.
 817:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 818:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be called on CONTROL type endpoints.
 819:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 820:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 821:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 822:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_WaitUntilReady_ErrorCodes_t enum.
 823:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 824:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_WaitUntilReady(void);
 825:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
 826:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Completes the status stage of a control transfer on a CONTROL type endpoint automatically,
 827:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  with respect to the data direction. This is a convenience function which can be used to
 828:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  simplify user control request handling.
 829:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 830:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearStatusStage(void);
 831:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 832:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads and discards the given number of bytes from the endpoint from the given buffer,
 833:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
 834:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
 835:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
 836:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the next
 837:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  packet is ready, allowing for early aborts of stream transfers.
 838:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 839:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 840:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 841:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 842:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 843:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 844:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 845:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 846:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 847:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to send via the currently selected endpoint.
 848:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 849:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 850:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 851:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 852:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Discard_Stream(uint16_t Length
 853:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM);
 854:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 855:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the endpoint from the given buffer in little endian,
 856:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The last packet filled is not automatically sent
 857:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  the user is responsible for manually sending the last written packet to the host via the
 858:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ref Endpoint_ClearIN() macro. Between each USB packet, the given stream callback function
 859:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  is executed repeatedly until the endpoint is ready to accept the next packet, allowing for e
 860:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborts of stream transfers.
 861:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 862:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 863:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 864:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 865:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 866:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 867:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 868:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 869:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 870:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 871:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 872:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 873:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 874:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 875:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 876:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Stream_LE(const void* Buffer,
 877:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
 878:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 879:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 880:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Stream_LE().
 881:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 882:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 883:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 884:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 885:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 886:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 887:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 888:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 889:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 890:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_EStream_LE(const void* Buffer,
 891:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 892:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 893:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 894:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Stream_LE().
 895:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 896:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
 897:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 898:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 899:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 900:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 901:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 902:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 903:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 904:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 905:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 906:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_PStream_LE(const void* Buffer,
 907:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 908:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 909:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 910:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the endpoint from the given buffer in big endian,
 911:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The last packet filled is not automatically sent
 912:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  the user is responsible for manually sending the last written packet to the host via the
 913:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ref Endpoint_ClearIN() macro. Between each USB packet, the given stream callback function
 914:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  is executed repeatedly until the endpoint is ready to accept the next packet, allowing for e
 915:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborts of stream transfers.
 916:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 917:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 918:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 919:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 920:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 921:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 922:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 923:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 924:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 925:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 926:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 927:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 928:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 929:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 930:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 931:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Stream_BE(const void* Buffer,
 932:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
 933:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 934:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 935:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Stream_BE().
 936:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 937:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 938:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 939:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 940:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 941:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 942:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 943:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 944:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 945:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_EStream_BE(const void* Buffer,
 946:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 947:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 948:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 949:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Stream_BE().
 950:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 951:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
 952:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 953:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 954:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 955:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 956:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 957:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 958:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 959:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 960:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 961:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_PStream_BE(const void* Buffer,
 962:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 963:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 964:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 965:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the endpoint from the given buffer in little endian,
 966:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
 967:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
 968:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
 969:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the endpoin
 970:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  is ready to accept the next packet, allowing for early aborts of stream transfers.
 971:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 972:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 973:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 974:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 975:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 976:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 977:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 978:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 979:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 980:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to.
 981:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
 982:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
 983:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 984:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 985:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 986:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Stream_LE(void* Buffer,
 987:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                uint16_t Length
 988:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 989:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 990:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Stream_LE().
 991:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 992:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 993:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 994:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to, located in EEPROM 
 995:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
 996:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
 997:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 998:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 999:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1000:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_EStream_LE(void* Buffer,
1001:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
1002:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1003:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
1004:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the endpoint from the given buffer in big endian,
1005:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
1006:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
1007:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
1008:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the endpoin
1009:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  is ready to accept the next packet, allowing for early aborts of stream transfers.
1010:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1011:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
1012:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
1013:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
1014:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1015:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
1016:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1017:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1018:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1019:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to.
1020:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
1021:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
1022:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1023:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
1024:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1025:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Stream_BE(void* Buffer,
1026:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                uint16_t Length
1027:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1028:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1029:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Stream_BE().
1030:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1031:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1032:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1033:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to, located in EEPROM 
1034:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
1035:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
1036:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1037:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
1038:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1039:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_EStream_BE(void* Buffer,
1040:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
1041:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1042:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1043:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the CONTROL type endpoint from the given buffer in littl
1044:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The host OUT acknowledgement is not automaticall
1045:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in both failure and success states; the user is responsible for manually clearing the setup 
1046:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  finalize the transfer via the \ref Endpoint_ClearOUT() macro.
1047:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1048:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1049:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1050:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1051:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1052:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1053:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1054:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1055:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1056:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1057:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1058:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1059:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1060:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1061:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1062:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1063:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1064:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_Stream_LE(const void* Buffer,
1065:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1066:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1067:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of Endpoint_Write_Control_Stream_LE.
1068:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1069:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1070:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1071:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1072:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1073:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1074:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1075:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1076:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1077:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1078:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1079:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1080:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1081:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1082:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1083:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1084:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1085:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_EStream_LE(const void* Buffer,
1086:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1087:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1088:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Control_Stream_LE().
1089:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1090:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
1091:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1092:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1093:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1094:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1095:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1096:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1097:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1098:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1099:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1100:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1101:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1102:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1103:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1104:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1105:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1106:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1107:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1108:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_PStream_LE(const void* Buffer,
1109:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1110:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1111:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the CONTROL type endpoint from the given buffer in big e
1112:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The host OUT acknowledgement is not automaticall
1113:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in both failure and success states; the user is responsible for manually clearing the setup 
1114:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  finalize the transfer via the \ref Endpoint_ClearOUT() macro.
1115:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1116:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1117:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1118:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1119:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1120:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1121:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1122:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1123:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1124:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1125:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1126:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1127:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1128:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1129:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1130:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1131:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1132:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_Stream_BE(const void* Buffer,
1133:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1134:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1135:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Control_Stream_BE().
1136:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1137:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1138:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1139:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1140:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1141:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1142:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1143:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1144:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1145:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1146:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1147:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1148:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1149:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1150:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1151:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1152:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1153:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_EStream_BE(const void* Buffer,
1154:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1155:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1156:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Control_Stream_BE().
1157:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1158:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
1159:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1160:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1161:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1162:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1163:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1164:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1165:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1166:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1167:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1168:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1169:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1170:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1171:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1172:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1173:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1174:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1175:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1176:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_PStream_BE(const void* Buffer,
1177:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1178:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1179:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the CONTROL endpoint from the given buffer in little en
1180:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The device IN acknowledgement is not
1181:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  automatically sent after success or failure states; the user is responsible for manually sen
1182:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  setup IN to finalize the transfer via the \ref Endpoint_ClearIN() macro.
1183:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1184:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1185:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1186:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1187:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1188:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1189:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1190:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1191:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1192:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1193:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1194:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1195:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1196:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1197:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1198:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1199:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1200:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_Stream_LE(void* Buffer,
1201:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                        uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1202:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1203:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Control_Stream_LE().
1204:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1205:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1206:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1207:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1208:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1209:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1210:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1211:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1212:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1213:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1214:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1215:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1216:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1217:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1218:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1219:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1220:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1221:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_EStream_LE(void* Buffer,
1222:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1223:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1224:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the CONTROL endpoint from the given buffer in big endia
1225:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The device IN acknowledgement is not
1226:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  automatically sent after success or failure states; the user is responsible for manually sen
1227:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  setup IN to finalize the transfer via the \ref Endpoint_ClearIN() macro.
1228:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1229:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1230:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1231:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1232:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1233:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1234:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1235:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1236:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1237:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1238:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1239:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1240:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1241:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1242:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1243:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1244:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1245:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_Stream_BE(void* Buffer,
1246:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                        uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1247:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
1248:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Control_Stream_BE().
1249:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1250:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1251:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1252:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1253:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1254:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1255:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1256:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1257:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1258:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1259:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1260:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1261:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1262:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1263:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
1264:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1265:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
1266:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_EStream_BE(void* Buffer,
1267:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1268:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1269:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
1270:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
1271:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
1272:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(n)               _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## n)
1273:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(details)        _ENDPOINT_GET_MAXSIZE3(details)
1274:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(maxsize, db)    maxsize
1275:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1276:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK(n)            _ENDPOINT_GET_DOUBLEBANK2(ENDPOINT_DETAILS_EP ## 
1277:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK2(details)     _ENDPOINT_GET_DOUBLEBANK3(details)
1278:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK3(maxsize, db) db
1279:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
1280:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
1281:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  true
1282:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, true
1283:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  true
1284:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  true
1285:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  true
1286:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  true
1287:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  true
1288:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
1289:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  true
1290:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  false
1291:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  false
1292:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  true
1293:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  true			
1294:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
1295:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1296:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define Endpoint_ConfigureEndpoint(Number, Type, Direction, Size, Banks)                        
1297:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                     (__builtin_constant_p(Size) ? Endpoint_ConfigureEndpointStatic((Number),   
1298:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    (Type),     
1299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    (Direction),
1300:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    Size, Banks)
1301:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                   Endpoint_ConfigureEndpointDynamic((Number),  
1302:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     (Type),    
1303:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     (Direction)
1304:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     Size, Banks
1305:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1306:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
1307:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			void    Endpoint_ClearEndpoints(void);
1308:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size);
1309:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			bool    Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
1310:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                       const uint8_t UECFG0XData,
1311:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                       const uint8_t UECFG1XData);			
1312:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
1313:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
1314:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
1315:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
1316:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
1317:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
1318:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
1319:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
1320:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
1321:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
1322:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
1323:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
1324:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				}
1325:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				
1326:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
1327:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
1328:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			
1329:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpointStatic(const uint8_t Number,
 315               		.loc 3 1329 23 view .LVU92
 316               		.loc 3 1329 23 is_stmt 0 view .LVU93
 317               	.LBE64:
1320:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
 318               		.loc 3 1320 11 is_stmt 1 view .LVU94
1326:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 319               		.loc 3 1326 5 view .LVU95
 320               	.LBB66:
 321               	.LBB65:
1330:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Type,
1331:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Direction,
1332:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint16_t Size,
1333:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Banks)
1334:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
1335:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 322               		.loc 3 1335 12 is_stmt 0 view .LVU96
 323 00fe 42E0      		ldi r20,lo8(2)
 324 0100 60E0      		ldi r22,0
 325 0102 80E0      		ldi r24,0
 326 0104 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 327               	.LVL3:
 328               	.LBE65:
 329               	.LBE66:
 148:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
 149:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		                           ENDPOINT_BANK_SINGLE);
 150:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 151:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#if defined(INTERRUPT_CONTROL_ENDPOINT)
 152:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_RXSTPI);
 330               		.loc 1 152 3 is_stmt 1 view .LVU97
 331               		.loc 1 152 3 view .LVU98
 332 0108 8091 F000 		lds r24,240
 333 010c 8860      		ori r24,lo8(8)
 334 010e 8093 F000 		sts 240,r24
 335               		.loc 1 152 3 view .LVU99
 153:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#endif
 154:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 155:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Reset();
 336               		.loc 1 155 3 view .LVU100
 337 0112 0E94 0000 		call EVENT_USB_Device_Reset
 338               	.LVL4:
 339               	.L8:
 156:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 157:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
 158:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 340               		.loc 1 158 2 view .LVU101
 341               		.loc 1 158 6 is_stmt 0 view .LVU102
 342 0116 8091 E100 		lds r24,225
 343               		.loc 1 158 5 view .LVU103
 344 011a 82FF      		sbrs r24,2
 345 011c 00C0      		rjmp .L3
 346               		.loc 1 158 43 discriminator 1 view .LVU104
 347 011e 8091 E200 		lds r24,226
 348               		.loc 1 158 40 discriminator 1 view .LVU105
 349 0122 82FF      		sbrs r24,2
 350 0124 00C0      		rjmp .L3
 159:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 160:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SOFI);
 351               		.loc 1 160 3 is_stmt 1 view .LVU106
 352               		.loc 1 160 3 view .LVU107
 353 0126 8091 E100 		lds r24,225
 354 012a 8B7F      		andi r24,lo8(-5)
 355 012c 8093 E100 		sts 225,r24
 356               		.loc 1 160 3 view .LVU108
 161:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		
 162:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_StartOfFrame();
 357               		.loc 1 162 3 view .LVU109
 358 0130 0E94 0000 		call EVENT_USB_Device_StartOfFrame
 359               	.LVL5:
 360               	.L3:
 361               	/* epilogue start */
 163:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 164:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 165:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
 166:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_HOST)
 167:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
 168:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 169:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_DDISCI);
 170:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_DCONNI);
 171:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_DDISCI);
 172:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			
 173:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceUnattached();
 174:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 175:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ResetInterface();
 176:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 177:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
 178:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
 179:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 180:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_VBERRI);
 181:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 182:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_Host_VBUS_Manual_Off();
 183:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_Host_VBUS_Auto_Off();
 184:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 185:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
 186:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceUnattached();
 187:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 188:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_HostState = HOST_STATE_Unattached;
 189:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 190:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 191:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
 192:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 193:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SRPI);
 194:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_SRPI);
 195:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	
 196:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceAttached();
 197:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 198:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_DDISCI);
 199:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		
 200:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_HostState = HOST_STATE_Powered;
 201:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 202:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 203:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
 204:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 205:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_BCERRI);
 206:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		
 207:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
 208:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceUnattached();
 209:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 210:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ResetInterface();
 211:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 212:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 213:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 214:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_BOTH)
 215:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
 216:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{		
 217:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_IDTI);
 218:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 219:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (USB_DeviceState != DEVICE_STATE_Unattached)
 220:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  EVENT_USB_Device_Disconnect();
 221:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 222:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (USB_HostState != HOST_STATE_Unattached)
 223:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  EVENT_USB_Host_DeviceUnattached();
 224:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		
 225:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_CurrentMode = USB_GetUSBModeFromUID();
 226:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_UIDChange();
 227:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 228:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ResetInterface();
 229:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 230:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 231:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** }
 362               		.loc 1 231 1 is_stmt 0 view .LVU110
 363 0134 FF91      		pop r31
 364 0136 EF91      		pop r30
 365 0138 BF91      		pop r27
 366 013a AF91      		pop r26
 367 013c 9F91      		pop r25
 368 013e 8F91      		pop r24
 369 0140 7F91      		pop r23
 370 0142 6F91      		pop r22
 371 0144 5F91      		pop r21
 372 0146 4F91      		pop r20
 373 0148 3F91      		pop r19
 374 014a 2F91      		pop r18
 375 014c 0F90      		pop r0
 376 014e 0FBE      		out __SREG__,r0
 377 0150 0F90      		pop r0
 378 0152 1F90      		pop r1
 379 0154 1895      		reti
 380               	.L10:
 126:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Connect();
 381               		.loc 1 126 19 view .LVU111
 382 0156 84E0      		ldi r24,lo8(4)
 383 0158 00C0      		rjmp .L7
 384               		.cfi_endproc
 385               	.LFE66:
 387               		.section	.text.__vector_12,"ax",@progbits
 388               	.global	__vector_12
 390               	__vector_12:
 391               	.LFB67:
 232:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 233:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** #if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
 234:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** ISR(USB_COM_vect, ISR_BLOCK)
 235:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** {
 392               		.loc 1 235 1 is_stmt 1 view -0
 393               		.cfi_startproc
 394 0000 1F92      		push r1
 395               	.LCFI14:
 396               		.cfi_def_cfa_offset 3
 397               		.cfi_offset 1, -2
 398 0002 0F92      		push r0
 399               	.LCFI15:
 400               		.cfi_def_cfa_offset 4
 401               		.cfi_offset 0, -3
 402 0004 0FB6      		in r0,__SREG__
 403 0006 0F92      		push r0
 404 0008 1124      		clr __zero_reg__
 405 000a FF92      		push r15
 406               	.LCFI16:
 407               		.cfi_def_cfa_offset 5
 408               		.cfi_offset 15, -4
 409 000c 0F93      		push r16
 410               	.LCFI17:
 411               		.cfi_def_cfa_offset 6
 412               		.cfi_offset 16, -5
 413 000e 1F93      		push r17
 414               	.LCFI18:
 415               		.cfi_def_cfa_offset 7
 416               		.cfi_offset 17, -6
 417 0010 2F93      		push r18
 418               	.LCFI19:
 419               		.cfi_def_cfa_offset 8
 420               		.cfi_offset 18, -7
 421 0012 3F93      		push r19
 422               	.LCFI20:
 423               		.cfi_def_cfa_offset 9
 424               		.cfi_offset 19, -8
 425 0014 4F93      		push r20
 426               	.LCFI21:
 427               		.cfi_def_cfa_offset 10
 428               		.cfi_offset 20, -9
 429 0016 5F93      		push r21
 430               	.LCFI22:
 431               		.cfi_def_cfa_offset 11
 432               		.cfi_offset 21, -10
 433 0018 6F93      		push r22
 434               	.LCFI23:
 435               		.cfi_def_cfa_offset 12
 436               		.cfi_offset 22, -11
 437 001a 7F93      		push r23
 438               	.LCFI24:
 439               		.cfi_def_cfa_offset 13
 440               		.cfi_offset 23, -12
 441 001c 8F93      		push r24
 442               	.LCFI25:
 443               		.cfi_def_cfa_offset 14
 444               		.cfi_offset 24, -13
 445 001e 9F93      		push r25
 446               	.LCFI26:
 447               		.cfi_def_cfa_offset 15
 448               		.cfi_offset 25, -14
 449 0020 AF93      		push r26
 450               	.LCFI27:
 451               		.cfi_def_cfa_offset 16
 452               		.cfi_offset 26, -15
 453 0022 BF93      		push r27
 454               	.LCFI28:
 455               		.cfi_def_cfa_offset 17
 456               		.cfi_offset 27, -16
 457 0024 CF93      		push r28
 458               	.LCFI29:
 459               		.cfi_def_cfa_offset 18
 460               		.cfi_offset 28, -17
 461 0026 DF93      		push r29
 462               	.LCFI30:
 463               		.cfi_def_cfa_offset 19
 464               		.cfi_offset 29, -18
 465 0028 EF93      		push r30
 466               	.LCFI31:
 467               		.cfi_def_cfa_offset 20
 468               		.cfi_offset 30, -19
 469 002a FF93      		push r31
 470               	.LCFI32:
 471               		.cfi_def_cfa_offset 21
 472               		.cfi_offset 31, -20
 473               	/* prologue: Signal */
 474               	/* frame size = 0 */
 475               	/* stack size = 20 */
 476               	.L__stack_usage = 20
 236:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 
 477               		.loc 1 236 2 view .LVU113
 478               	.LBB67:
 479               	.LBI67:
 277:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 480               		.loc 3 277 26 view .LVU114
 481               	.LBB68:
 280:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#else
 482               		.loc 3 280 6 view .LVU115
 280:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#else
 483               		.loc 3 280 20 is_stmt 0 view .LVU116
 484 002c C9EE      		ldi r28,lo8(-23)
 485 002e D0E0      		ldi r29,0
 486 0030 8881      		ld r24,Y
 487 0032 8770      		andi r24,lo8(7)
 488 0034 F82E      		mov r15,r24
 489               	.LVL6:
 280:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#else
 490               		.loc 3 280 20 view .LVU117
 491               	.LBE68:
 492               	.LBE67:
 237:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 238:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
 493               		.loc 1 238 2 is_stmt 1 view .LVU118
 494               	.LBB69:
 495               	.LBI69:
 296:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 496               		.loc 3 296 23 view .LVU119
 497               	.LBB70:
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 498               		.loc 3 299 6 view .LVU120
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 499               		.loc 3 299 12 is_stmt 0 view .LVU121
 500 0036 1882      		st Y,__zero_reg__
 501               	.LVL7:
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 502               		.loc 3 299 12 view .LVU122
 503               	.LBE70:
 504               	.LBE69:
 239:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USB_INT_Disable(USB_INT_RXSTPI);
 505               		.loc 1 239 2 is_stmt 1 view .LVU123
 506               		.loc 1 239 2 view .LVU124
 507 0038 00EF      		ldi r16,lo8(-16)
 508 003a 10E0      		ldi r17,0
 509 003c F801      		movw r30,r16
 510 003e 8081      		ld r24,Z
 511 0040 877F      		andi r24,lo8(-9)
 512 0042 8083      		st Z,r24
 513               		.loc 1 239 2 view .LVU125
 240:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 241:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
 514               		.loc 1 241 2 view .LVU126
 515               	.LBB71:
 516               		.loc 1 241 2 view .LVU127
 517               	.LVL8:
 518               	.LBB72:
 519               	.LBI72:
 520               		.file 4 "/usr/avr/include/util/atomic.h"
   1:/usr/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/avr/include/util/atomic.h **** 
   4:/usr/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/avr/include/util/atomic.h **** 
   7:/usr/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/avr/include/util/atomic.h **** 
  10:/usr/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/avr/include/util/atomic.h ****      distribution.
  14:/usr/avr/include/util/atomic.h **** 
  15:/usr/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/avr/include/util/atomic.h **** 
  19:/usr/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/avr/include/util/atomic.h **** */
  31:/usr/avr/include/util/atomic.h **** 
  32:/usr/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/avr/include/util/atomic.h **** 
  34:/usr/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/avr/include/util/atomic.h **** 
  37:/usr/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/avr/include/util/atomic.h **** 
  40:/usr/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
 521               		.loc 4 42 27 view .LVU128
 522               	.LBB73:
  43:/usr/avr/include/util/atomic.h **** {
  44:/usr/avr/include/util/atomic.h ****     sei();
 523               		.loc 4 44 5 view .LVU129
 524               	/* #APP */
 525               	 ;  44 "/usr/avr/include/util/atomic.h" 1
 526 0044 7894      		sei
 527               	 ;  0 "" 2
  45:/usr/avr/include/util/atomic.h ****     return 1;
 528               		.loc 4 45 5 view .LVU130
 529               	.LVL9:
 530               		.loc 4 45 5 is_stmt 0 view .LVU131
 531               	/* #NOAPP */
 532               	.LBE73:
 533               	.LBE72:
 534               		.loc 1 241 2 is_stmt 1 view .LVU132
 242:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 243:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_Device_ProcessControlRequest();
 535               		.loc 1 243 3 view .LVU133
 536 0046 0E94 0000 		call USB_Device_ProcessControlRequest
 537               	.LVL10:
 241:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 538               		.loc 1 241 2 view .LVU134
 241:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 539               		.loc 1 241 2 view .LVU135
 540               	.LBB74:
 541               	.LBI74:
  46:/usr/avr/include/util/atomic.h **** }
  47:/usr/avr/include/util/atomic.h **** 
  48:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/avr/include/util/atomic.h **** {
  50:/usr/avr/include/util/atomic.h ****     cli();
  51:/usr/avr/include/util/atomic.h ****     return 1;
  52:/usr/avr/include/util/atomic.h **** }
  53:/usr/avr/include/util/atomic.h **** 
  54:/usr/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/avr/include/util/atomic.h **** {
  56:/usr/avr/include/util/atomic.h ****     sei();
  57:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/avr/include/util/atomic.h **** }
  60:/usr/avr/include/util/atomic.h **** 
  61:/usr/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
 542               		.loc 4 61 24 view .LVU136
 543               	.LBB75:
  62:/usr/avr/include/util/atomic.h **** {
  63:/usr/avr/include/util/atomic.h ****     cli();
 544               		.loc 4 63 5 view .LVU137
 545               	/* #APP */
 546               	 ;  63 "/usr/avr/include/util/atomic.h" 1
 547 004a F894      		cli
 548               	 ;  0 "" 2
  64:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 549               		.loc 4 64 5 view .LVU138
  65:/usr/avr/include/util/atomic.h ****     (void)__s;
 550               		.loc 4 65 5 view .LVU139
 551               	.LVL11:
 552               		.loc 4 65 5 is_stmt 0 view .LVU140
 553               	/* #NOAPP */
 554               	.LBE75:
 555               	.LBE74:
 556               	.LBE71:
 244:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 245:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 246:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
 557               		.loc 1 246 2 is_stmt 1 view .LVU141
 558               	.LBB76:
 559               	.LBI76:
 296:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 560               		.loc 3 296 23 view .LVU142
 561               	.LBB77:
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 562               		.loc 3 299 6 view .LVU143
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 563               		.loc 3 299 12 is_stmt 0 view .LVU144
 564 004c 1882      		st Y,__zero_reg__
 565               	.LVL12:
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 566               		.loc 3 299 12 view .LVU145
 567               	.LBE77:
 568               	.LBE76:
 247:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USB_INT_Enable(USB_INT_RXSTPI);
 569               		.loc 1 247 2 is_stmt 1 view .LVU146
 570               		.loc 1 247 2 view .LVU147
 571 004e F801      		movw r30,r16
 572 0050 8081      		ld r24,Z
 573 0052 8860      		ori r24,lo8(8)
 574 0054 8083      		st Z,r24
 575               		.loc 1 247 2 view .LVU148
 248:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
 576               		.loc 1 248 2 view .LVU149
 577               	.LVL13:
 578               	.LBB78:
 579               	.LBI78:
 296:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 580               		.loc 3 296 23 view .LVU150
 581               	.LBB79:
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 582               		.loc 3 299 6 view .LVU151
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 583               		.loc 3 299 12 is_stmt 0 view .LVU152
 584 0056 F882      		st Y,r15
 585               	.LVL14:
 586               	/* epilogue start */
 299:LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 587               		.loc 3 299 12 view .LVU153
 588               	.LBE79:
 589               	.LBE78:
 249:LUFA/LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** }
 590               		.loc 1 249 1 view .LVU154
 591 0058 FF91      		pop r31
 592 005a EF91      		pop r30
 593 005c DF91      		pop r29
 594 005e CF91      		pop r28
 595 0060 BF91      		pop r27
 596 0062 AF91      		pop r26
 597 0064 9F91      		pop r25
 598 0066 8F91      		pop r24
 599 0068 7F91      		pop r23
 600 006a 6F91      		pop r22
 601 006c 5F91      		pop r21
 602 006e 4F91      		pop r20
 603 0070 3F91      		pop r19
 604 0072 2F91      		pop r18
 605 0074 1F91      		pop r17
 606 0076 0F91      		pop r16
 607 0078 FF90      		pop r15
 608               	.LVL15:
 609               		.loc 1 249 1 view .LVU155
 610 007a 0F90      		pop r0
 611 007c 0FBE      		out __SREG__,r0
 612 007e 0F90      		pop r0
 613 0080 1F90      		pop r1
 614 0082 1895      		reti
 615               		.cfi_endproc
 616               	.LFE67:
 618               		.text
 619               	.Letext0:
 620               		.file 5 "/usr/avr/include/stdint.h"
 621               		.file 6 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/DeviceStandardReq.h"
 622               		.file 7 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/Events.h"
 623               		.file 8 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 USBInterrupt.c
     /tmp/ccjTiBAI.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccjTiBAI.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccjTiBAI.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccjTiBAI.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccjTiBAI.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccjTiBAI.s:13     .text.USB_INT_DisableAllInterrupts:0000000000000000 USB_INT_DisableAllInterrupts
     /tmp/ccjTiBAI.s:34     .text.USB_INT_ClearAllInterrupts:0000000000000000 USB_INT_ClearAllInterrupts
     /tmp/ccjTiBAI.s:54     .text.__vector_11:0000000000000000 __vector_11
     /tmp/ccjTiBAI.s:390    .text.__vector_12:0000000000000000 __vector_12

UNDEFINED SYMBOLS
EVENT_USB_Device_Disconnect
USB_ConfigurationNumber
EVENT_USB_Device_Connect
Endpoint_ClearEndpoints
Endpoint_ConfigureEndpoint_Prv
EVENT_USB_Device_Reset
EVENT_USB_Device_StartOfFrame
USB_Device_ProcessControlRequest

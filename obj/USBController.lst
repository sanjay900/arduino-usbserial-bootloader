   1               		.file	"USBController.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.USB_ResetInterface,"ax",@progbits
  11               	.global	USB_ResetInterface
  13               	USB_ResetInterface:
  14               	.LFB66:
  15               		.file 1 "LUFA/LUFA/Drivers/USB/LowLevel/USBController.c"
   1:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** /*
   2:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****              LUFA Library
   3:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****      Copyright (C) Dean Camera, 2010.
   4:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****               
   5:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****       www.fourwalledcubicle.com
   7:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** */
   8:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
   9:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** /*
  10:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  12:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   software and its documentation for any purpose is hereby granted
  14:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   without fee, provided that the above copyright notice appear in 
  15:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   all copies and that both that the copyright notice and this
  16:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   permission notice and warranty disclaimer appear in supporting 
  17:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   documentation, and that the name of the author not be used in 
  18:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   advertising or publicity pertaining to distribution of the 
  19:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   software without specific, written prior permission.
  20:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  21:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   The author disclaim all warranties with regard to this
  22:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   software, including all implied warranties of merchantability
  23:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   and fitness.  In no event shall the author be liable for any
  24:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   special, indirect or consequential damages or any damages
  25:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   in an action of contract, negligence or other tortious action,
  27:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   arising out of or in connection with the use or performance of
  28:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   this software.
  29:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** */
  30:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  31:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #include "USBController.h"
  33:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  34:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY))
  35:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** volatile uint8_t USB_CurrentMode = USB_MODE_NONE;
  36:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #endif
  37:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  38:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #if !defined(USE_STATIC_OPTIONS)
  39:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** volatile uint8_t USB_Options;
  40:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #endif
  41:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  42:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_Init(
  43:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #if defined(USB_CAN_BE_BOTH)
  44:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                const uint8_t Mode
  45:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  46:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  47:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS))
  48:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                ,
  49:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
  50:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                void
  51:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  52:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			   
  53:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #if !defined(USE_STATIC_OPTIONS)
  54:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                const uint8_t Options
  55:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  56:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                )
  57:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
  58:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
  59:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentMode = Mode;
  60:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  61:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  62:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(USE_STATIC_OPTIONS)
  63:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Options = Options;
  64:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  65:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  66:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_HOST)
  67:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
  68:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  69:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
  70:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_DEVICE_ONLY) && (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  71:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON |= (1 << UIMOD);
  72:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#elif defined(USB_HOST_ONLY)
  73:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON &= ~(1 << UIMOD);
  74:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#elif defined(USB_CAN_BE_BOTH)
  75:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (Mode == USB_MODE_UID)
  76:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  77:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON |=  (1 << UIDE);
  78:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  79:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Clear(USB_INT_IDTI);
  80:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_IDTI);
  81:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		
  82:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_CurrentMode = USB_GetUSBModeFromUID();
  83:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  84:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else if (Mode == USB_MODE_DEVICE)
  85:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  86:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON |=  (1 << UIMOD);
  87:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  88:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else if (Mode == USB_MODE_HOST)			
  89:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  90:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON &= ~(1 << UIMOD);
  91:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  92:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else
  93:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  94:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
  95:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		return;
  96:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  97:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  98:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
  99:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 100:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 101:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_OTGPAD_On();
 103:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 104:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 105:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = true;
 106:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** }
 107:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 108:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_ShutDown(void)
 109:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
 110:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 111:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Detach();
 112:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Controller_Disable();
 113:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 114:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_DisableAllInterrupts();
 115:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
 116:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 117:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 118:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON &= ~(1 << UIMOD);
 119:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 120:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 121:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_MANUAL_PLL))
 122:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_PLL_Off();
 123:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 124:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_REG_Off();
 125:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 126:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 127:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_OTGPAD_Off();
 128:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 129:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 130:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 131:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON &= ~(1 << UIDE);
 132:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 133:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 134:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = false;
 135:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 136:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 137:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentMode = USB_MODE_NONE;
 138:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 139:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** }
 140:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 141:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_ResetInterface(void)
 142:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
  16               		.loc 1 142 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 143:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_DisableAllInterrupts();
  22               		.loc 1 143 2 view .LVU1
  23 0000 0E94 0000 		call USB_INT_DisableAllInterrupts
  24               	.LVL0:
 144:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
  25               		.loc 1 144 2 view .LVU2
  26 0004 0E94 0000 		call USB_INT_ClearAllInterrupts
  27               	.LVL1:
 145:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 146:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_HOST)
 147:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_HostState   = HOST_STATE_Unattached;
 148:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 149:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 150:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_DEVICE)
 151:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_DeviceState = DEVICE_STATE_Unattached;
  28               		.loc 1 151 2 view .LVU3
  29               		.loc 1 151 18 is_stmt 0 view .LVU4
  30 0008 1EBA      		out 0x1e,__zero_reg__
 152:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ConfigurationNumber  = 0;
  31               		.loc 1 152 2 is_stmt 1 view .LVU5
  32               		.loc 1 152 27 is_stmt 0 view .LVU6
  33 000a 1092 0000 		sts USB_ConfigurationNumber,__zero_reg__
 153:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 154:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
 155:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_RemoteWakeupEnabled  = false;
  34               		.loc 1 155 2 is_stmt 1 view .LVU7
  35               		.loc 1 155 27 is_stmt 0 view .LVU8
  36 000e 1092 0000 		sts USB_RemoteWakeupEnabled,__zero_reg__
 156:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 157:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 158:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(NO_DEVICE_SELF_POWER)
 159:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentlySelfPowered = false;
  37               		.loc 1 159 2 is_stmt 1 view .LVU9
  38               		.loc 1 159 27 is_stmt 0 view .LVU10
  39 0012 1092 0000 		sts USB_CurrentlySelfPowered,__zero_reg__
 160:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 161:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 162:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 163:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_MANUAL_PLL))
  40               		.loc 1 163 2 is_stmt 1 view .LVU11
 164:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 165:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(USB_SERIES_4_AVR)
 166:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
 167:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 168:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 169:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_PLL_On();
  41               		.loc 1 169 3 view .LVU12
  42               	.LBB22:
  43               	.LBI22:
  44               		.file 2 "LUFA/LUFA/Drivers/USB/LowLevel/USBController.h"
   1:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /*
   2:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****              LUFA Library
   3:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****      Copyright (C) Dean Camera, 2010.
   4:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****               
   5:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****       www.fourwalledcubicle.com
   7:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** */
   8:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
   9:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /*
  10:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  12:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   without fee, provided that the above copyright notice appear in 
  15:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   all copies and that both that the copyright notice and this
  16:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   permission notice and warranty disclaimer appear in supporting 
  17:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   documentation, and that the name of the author not be used in 
  18:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   advertising or publicity pertaining to distribution of the 
  19:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software without specific, written prior permission.
  20:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  21:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   The author disclaim all warranties with regard to this
  22:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software, including all implied warranties of merchantability
  23:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   special, indirect or consequential damages or any damages
  25:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   arising out of or in connection with the use or performance of
  28:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   this software.
  29:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** */
  30:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  31:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /** \file
  32:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \brief USB low level USB controller definitions.
  33:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  34:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  This file contains structures, function prototypes and macros related to the low level configur
  35:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  USB controller, to start, stop and reset the USB library core.
  36:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  37:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  40:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  
  41:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /** \ingroup Group_USB
  42:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @defgroup Group_USBManagement USB Interface Management
  43:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  44:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  45:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  46:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @{
  47:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  48:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  49:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** #ifndef __USBCONTROLLER_H__
  50:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** #define __USBCONTROLLER_H__
  51:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  52:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Includes: */
  53:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/io.h>
  54:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/interrupt.h>
  55:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <stdbool.h>
  56:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  57:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  58:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  59:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../../../Common/Common.h"
  60:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  61:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/Events.h"
  62:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBTask.h"
  63:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "USBInterrupt.h"
  64:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  65:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  66:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Host.h"
  67:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Pipe.h"
  68:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "OTG.h"
  69:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/HostStandardReq.h"
  70:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  71:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  72:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  73:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Device.h"
  74:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Endpoint.h"
  75:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/DeviceStandardReq.h"
  76:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  77:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  78:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Enable C linkage for C++ Compilers: */
  79:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(__cplusplus)
  80:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			extern "C" {
  81:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  82:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  83:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Preprocessor Checks and Defines: */
  84:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  85:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  86:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  87:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  88:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(F_CLOCK)
  89:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error F_CLOCK is not defined. You must define F_CLOCK to the frequency of the unprescaled input
  90:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  91:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	
  92:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if (F_CLOCK == 8000000)
  93:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  94:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  95:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
  96:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  97:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  98:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  99:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
 100:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 101:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
 102:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 103:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 104:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#elif (F_CLOCK == 16000000)
 105:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 106:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 107:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
 108:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 109:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 110:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 111:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 112:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 113:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 114:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 115:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 116:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 117:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 118:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(USB_PLL_PSC)
 119:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error No PLL prescale value available for chosen F_CPU value and AVR model.
 120:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 121:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 122:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Public Interface - May be used in end-application: */
 123:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Macros: */
 124:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global. This indicates that the USB interface is curr
 125:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  initialized into any mode.
 126:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 127:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_NONE                      0
 128:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 129:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global and the \ref USB_Init() function. This indicat
 130:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB interface is or should be initialized in the USB device mode.
 131:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 132:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_DEVICE                    1
 133:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 134:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global and the \ref USB_Init() function. This indicat
 135:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB interface is or should be initialized in the USB host mode.
 136:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 137:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_HOST                      2
 138:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 139:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 140:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Mode mask for the the \ref USB_Init() function. This indicates that the USB interface shoul
 141:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  initialized into whatever mode the UID pin of the USB AVR indicates, and that the device
 142:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  should swap over its mode when the level of the UID pin changes during operation.
 143:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 144:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This token is not available on AVR models which do not support both host and device m
 145:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 146:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_MODE_UID                       3
 147:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 148:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 149:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 150:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be enabled to regulate the data pin voltages to within the USB standard.
 151:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 152:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 153:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 154:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 155:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 156:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 157:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 158:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 159:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 160:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 161:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 162:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 163:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 164:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 165:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 166:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 167:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 168:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 169:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 170:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 171:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 172:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 173:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 174:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 175:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a CONTROL type endpoint or pipe.
 176:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 177:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 178:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 179:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_CONTROL                    0x00
 180:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 181:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an ISOCHRONOUS type endpoint or pipe.
 182:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 183:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 184:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 185:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_ISOCHRONOUS                0x01
 186:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 187:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a BULK type endpoint or pipe.
 188:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 189:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 190:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 191:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_BULK                       0x02
 192:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 193:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an INTERRUPT type endpoint or pipe.
 194:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 195:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 196:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 197:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_INTERRUPT                  0x03
 198:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 199:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 200:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 201:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 202:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 203:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 204:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  This value may be overridden in the user project makefile as the value of the 
 205:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 206:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 207:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 208:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 209:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 210:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 211:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 212:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Returns boolean true if the VBUS line is currently high (i.e. the USB host is supplying pow
 213:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  otherwise returns false.
 214:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 215:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 216:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 217:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 218:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void)
 219:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				{
 220:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 221:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				}
 222:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 223:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 224:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 225:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 226:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 227:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 228:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 229:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void)
 230:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 231:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  |=  (1 << DETACH);
 232:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 233:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 234:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Attaches the device to the USB bus. This announces the device's presence to any attached
 235:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB host, starting the enumeration process. If no host is present, attaching the device
 236:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will allow for enumeration once a host is connected to the device.
 237:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 238:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  This is inexplicably also required for proper operation while in host mode, to enable the
 239:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attachment of a device to the host. This is despite the bit being located in the device-mode
 240:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  register and despite the datasheet making no mention of its requirement in host mode.
 241:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 242:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
 243:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void)
 244:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 245:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  &= ~(1 << DETACH);
 246:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 247:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 248:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Function Prototypes: */
 249:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Main function to initialize and start the USB interface. Once active, the USB interface will
 250:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  allow for device connection to a host when in device mode, or for device enumeration while i
 251:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  host mode.
 252:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 253:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  As the USB library relies on interrupts for the device and host mode enumeration processes,
 254:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  the user must enable global interrupts before or shortly after this function is called. In
 255:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  device mode, interrupts must be enabled within 500ms of this function being called to ensure
 256:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the host does not time out whilst enumerating the device. In host mode, interrupts may 
 257:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enabled at the application's leisure however enumeration will not begin of an attached devic
 258:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  until after this has occurred.
 259:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 260:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  Calling this function when the USB interface is already initialized will cause a complete US
 261:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  interface reset and re-enumeration.
 262:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 263:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Mode     This is a mask indicating what mode the USB interface is to be initializ
 264:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      Valid mode masks are \ref USB_MODE_DEVICE, \ref USB_MODE_HOST or \ref US
 265:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 266:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Options  Mask indicating the options which should be used when initializing the U
 267:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      interface to control the USB interface's behaviour. This should be compr
 268:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      a USB_OPT_REG_* mask to control the regulator, a USB_OPT_*_PLL mask to c
 269:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      PLL, and a USB_DEVICE_OPT_* mask (when the device mode is enabled) to se
 270:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      mode speed.
 271:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 272:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only device or host mode is require
 273:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the mode can be statically set in the project makefile by defining the token USB_DEVIC
 274:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        (for device mode) or USB_HOST_ONLY (for host mode), passing the token to the compiler 
 275:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        via the -D switch. If the mode is statically set, this parameter does not exist in the
 276:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        function prototype.
 277:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 278:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 279:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only fixed settings are are require
 280:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the options may be set statically in the same manner as the mode (see the Mode paramet
 281:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        this function). To statically set the USB options, pass in the USE_STATIC_OPTIONS toke
 282:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        defined to the appropriate options masks. When the options are statically set, this
 283:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        parameter does not exist in the function prototype.
 284:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 285:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        
 286:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note The mode parameter does not exist on devices where only one mode is possible, such as 
 287:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        AVR models which only implement the USB device mode in hardware.
 288:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 289:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \see Device.h for the USB_DEVICE_OPT_* masks.
 290:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 291:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_Init(
 292:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 293:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Mode
 294:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 295:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 296:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS)) || defined(__DOXYG
 297:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               ,
 298:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
 299:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               void
 300:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 301:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 302:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 303:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Options
 304:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 305:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               );
 306:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 307:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Shuts down the USB interface. This turns off the USB interface after deallocating all USB FI
 308:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  memory, endpoints and pipes. When turned off, no USB functionality can be used until the int
 309:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  is restarted with the \ref USB_Init() function.
 310:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 311:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ShutDown(void);
 312:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 313:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Resets the interface, when already initialized. This will re-enumerate the device if already
 314:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  to a host, or re-enumerate an already attached device when in host mode.
 315:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 316:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ResetInterface(void);
 317:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 318:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Enums: */
 319:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Enum for error codes relating to the powering on of the USB interface. These error codes are
 320:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  used in the ErrorCode parameter value of the \ref EVENT_USB_InitFailure() event.
 321:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 322:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			enum USB_InitErrorCodes_t
 323:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 324:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_INITERROR_NoUSBModeSpecified       = 0, /**< Indicates that \ref USB_Init() was called with
 325:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				                                             *   invalid or missing Mode parameter.
 326:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				                                             */
 327:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			};
 328:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 329:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Global Variables: */
 330:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY)) || defined(__DOXYGEN__)
 331:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the mode that the USB interface is currently initialized to. This value will be
 332:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  one of the USB_MODE_* masks defined elsewhere in this module.
 333:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 334:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 335:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 336:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 337:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_CurrentMode;
 338:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_HOST_ONLY)
 339:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_HOST
 340:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_DEVICE_ONLY)
 341:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_DEVICE
 342:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 343:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 344:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 345:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the current USB options that the USB interface was initialized with when \ref USB
 346:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  was called. This value will be one of the USB_MODE_* masks defined elsewhere in this module
 347:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 348:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 349:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 350:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 351:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_Options;
 352:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USE_STATIC_OPTIONS)
 353:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_Options USE_STATIC_OPTIONS
 354:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 355:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 356:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Private Interface - For use in library only: */
 357:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	#if !defined(__DOXYGEN__)
 358:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 359:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
 360:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void)
  45               		.loc 2 360 23 view .LVU13
  46               	.LBB23:
 361:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 362:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = USB_PLL_PSC;
  47               		.loc 2 362 5 view .LVU14
  48               		.loc 2 362 13 is_stmt 0 view .LVU15
  49 0016 84E0      		ldi r24,lo8(4)
  50 0018 89BD      		out 0x29,r24
 363:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
  51               		.loc 2 363 5 is_stmt 1 view .LVU16
  52               		.loc 2 363 12 is_stmt 0 view .LVU17
  53 001a 89B5      		in r24,0x29
  54 001c 8260      		ori r24,lo8(2)
  55 001e 89BD      		out 0x29,r24
  56               	.L2:
  57               	.LBE23:
  58               	.LBE22:
 170:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		while (!(USB_PLL_IsReady()));
  59               		.loc 1 170 31 is_stmt 1 discriminator 1 view .LVU18
  60               		.loc 1 170 9 discriminator 1 view .LVU19
  61               	.LBB24:
  62               	.LBI24:
 364:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 365:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 366:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
 367:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void)
 368:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 369:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
 370:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 371:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 372:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 373:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void)
  63               		.loc 2 373 23 discriminator 1 view .LVU20
  64               	.LBB25:
 374:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 375:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				return ((PLLCSR  &   (1 << PLOCK)) ? true : false);
  65               		.loc 2 375 5 discriminator 1 view .LVU21
  66               	.LBE25:
  67               	.LBE24:
  68               		.loc 1 170 9 is_stmt 0 discriminator 1 view .LVU22
  69 0020 09B4      		in __tmp_reg__,0x29
  70 0022 00FE      		sbrs __tmp_reg__,0
  71 0024 00C0      		rjmp .L2
 171:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 172:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 173:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Controller_Reset();
  72               		.loc 1 173 2 is_stmt 1 view .LVU23
  73               	.LBB26:
  74               	.LBI26:
 376:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 377:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 378:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
 379:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void)
 380:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 381:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 382:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  |=  (1 << UVREGE);
 383:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 384:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   &= ~(1 << REGDIS);
 385:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 386:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 387:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 388:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
 389:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void)
 390:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 391:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 392:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  &= ~(1 << UVREGE);
 393:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 394:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   |=  (1 << REGDIS);
 395:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 396:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 397:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 398:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 399:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
 400:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void)
 401:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 402:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << OTGPADE);
 403:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 404:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 405:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
 406:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void)
 407:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 408:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << OTGPADE);
 409:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 410:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 411:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 412:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
 413:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void)
 414:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 415:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << FRZCLK);
 416:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 417:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 418:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
 419:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void)
 420:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 421:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << FRZCLK);
 422:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 423:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 424:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Enable(void) ATTR_ALWAYS_INLINE;
 425:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Enable(void)
 426:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 427:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << USBE);
 428:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 429:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 430:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
 431:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Disable(void)
 432:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 433:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << USBE);
 434:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 435:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 436:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
 437:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Reset(void)
  75               		.loc 2 437 23 view .LVU24
  76               	.LBB27:
 438:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 439:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				const uint8_t Temp = USBCON;
  77               		.loc 2 439 5 view .LVU25
  78               		.loc 2 439 19 is_stmt 0 view .LVU26
  79 0026 8091 D800 		lds r24,216
  80               	.LVL2:
 440:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				
 441:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON = (Temp & ~(1 << USBE));
  81               		.loc 2 441 5 is_stmt 1 view .LVU27
  82               		.loc 2 441 20 is_stmt 0 view .LVU28
  83 002a 982F      		mov r25,r24
  84 002c 9F77      		andi r25,lo8(127)
  85               		.loc 2 441 12 view .LVU29
  86 002e 9093 D800 		sts 216,r25
 442:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON = (Temp |  (1 << USBE));
  87               		.loc 2 442 5 is_stmt 1 view .LVU30
  88               		.loc 2 442 12 is_stmt 0 view .LVU31
  89 0032 8068      		ori r24,lo8(-128)
  90               	.LVL3:
  91               		.loc 2 442 12 view .LVU32
  92 0034 8093 D800 		sts 216,r24
  93               		.loc 2 442 12 view .LVU33
  94               	.LBE27:
  95               	.LBE26:
 174:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 175:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 176:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (UHWCON & (1 << UIDE))
 177:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 178:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Clear(USB_INT_IDTI);
 179:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_IDTI);
 180:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_CurrentMode = USB_GetUSBModeFromUID();
 181:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 182:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 183:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		
 184:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_REG_DISABLED))
  96               		.loc 1 184 2 is_stmt 1 view .LVU34
 185:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_REG_On();
  97               		.loc 1 185 4 view .LVU35
  98               	.LBB28:
  99               	.LBI28:
 379:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 100               		.loc 2 379 23 view .LVU36
 101               	.LBB29:
 384:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 102               		.loc 2 384 5 view .LVU37
 384:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 103               		.loc 2 384 13 is_stmt 0 view .LVU38
 104 0038 8091 6300 		lds r24,99
 105 003c 8E7F      		andi r24,lo8(-2)
 106 003e 8093 6300 		sts 99,r24
 107               	.LBE29:
 108               	.LBE28:
 186:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else
 187:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_REG_Off();
 188:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 189:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CLK_Unfreeze();
 109               		.loc 1 189 2 is_stmt 1 view .LVU39
 110               	.LBB30:
 111               	.LBI30:
 419:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 112               		.loc 2 419 23 view .LVU40
 113               	.LBB31:
 421:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 114               		.loc 2 421 5 view .LVU41
 421:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 115               		.loc 2 421 13 is_stmt 0 view .LVU42
 116 0042 8091 D800 		lds r24,216
 117 0046 8F7D      		andi r24,lo8(-33)
 118 0048 8093 D800 		sts 216,r24
 119               	.LBE31:
 120               	.LBE30:
 190:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 191:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if (defined(USB_CAN_BE_DEVICE) && (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defi
 192:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (USB_CurrentMode == USB_MODE_DEVICE)
 193:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 194:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
 195:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		  USB_Device_SetLowSpeed();
 196:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		else
 197:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		  USB_Device_SetFullSpeed();
 198:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 199:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 200:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 201:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if (defined(USB_CAN_BE_DEVICE) && !defined(FIXED_CONTROL_ENDPOINT_SIZE))
 202:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (USB_CurrentMode == USB_MODE_DEVICE)
 203:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 204:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Descriptor_Device_t* DeviceDescriptorPtr;
 205:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 206:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIP
 207:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		{		  
 208:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#if defined(USE_RAM_DESCRIPTORS)
 209:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			USB_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
 210:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#elif defined(USE_EEPROM_DESCRIPTORS)
 211:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			USB_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 212:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#else
 213:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			USB_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 214:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#endif
 215:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		}
 216:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 217:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 218:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 219:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Attach();
 121               		.loc 1 219 2 is_stmt 1 view .LVU43
 122               	.LBB32:
 123               	.LBI32:
 243:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 124               		.loc 2 243 23 view .LVU44
 125               	.LBB33:
 245:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 126               		.loc 2 245 5 view .LVU45
 245:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 127               		.loc 2 245 12 is_stmt 0 view .LVU46
 128 004c 8091 E000 		lds r24,224
 129 0050 8E7F      		andi r24,lo8(-2)
 130 0052 8093 E000 		sts 224,r24
 131               	.LBE33:
 132               	.LBE32:
 220:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 221:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_DEVICE_ONLY)
 222:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Clear(USB_INT_SUSPEND);
 133               		.loc 1 222 2 is_stmt 1 view .LVU47
 134               		.loc 1 222 2 view .LVU48
 135 0056 8091 E100 		lds r24,225
 136 005a 8E7F      		andi r24,lo8(-2)
 137 005c 8093 E100 		sts 225,r24
 138               		.loc 1 222 2 view .LVU49
 223:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_SUSPEND);
 139               		.loc 1 223 2 view .LVU50
 140               		.loc 1 223 2 view .LVU51
 141 0060 8091 E200 		lds r24,226
 142 0064 8160      		ori r24,lo8(1)
 143 0066 8093 E200 		sts 226,r24
 144               		.loc 1 223 2 view .LVU52
 224:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Clear(USB_INT_EORSTI);
 145               		.loc 1 224 2 view .LVU53
 146               		.loc 1 224 2 view .LVU54
 147 006a 8091 E100 		lds r24,225
 148 006e 877F      		andi r24,lo8(-9)
 149 0070 8093 E100 		sts 225,r24
 150               		.loc 1 224 2 view .LVU55
 225:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_EORSTI);
 151               		.loc 1 225 2 view .LVU56
 152               		.loc 1 225 2 view .LVU57
 153 0074 8091 E200 		lds r24,226
 154 0078 8860      		ori r24,lo8(8)
 155 007a 8093 E200 		sts 226,r24
 156               		.loc 1 225 2 view .LVU58
 157               	/* epilogue start */
 226:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 227:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 228:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_VBUS);
 229:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 230:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#elif defined(USB_HOST_ONLY)
 231:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Host_HostMode_On();
 232:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 233:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Host_VBUS_Auto_Off();
 234:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_OTGPAD_Off();
 235:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 236:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Host_VBUS_Manual_Enable();
 237:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Host_VBUS_Manual_On();
 238:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 239:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_SRPI);
 240:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_BCERRI);
 241:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#else
 242:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (USB_CurrentMode == USB_MODE_DEVICE)
 243:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 244:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Clear(USB_INT_SUSPEND);
 245:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_SUSPEND);
 246:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Clear(USB_INT_EORSTI);
 247:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_EORSTI);
 248:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 249:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 250:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_VBUS);
 251:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 252:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 253:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(CONTROL_ONLY_DEVICE)
 254:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		UENUM = ENDPOINT_CONTROLEP;
 255:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 256:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 257:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else if (USB_CurrentMode == USB_MODE_HOST)
 258:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 259:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Host_HostMode_On();
 260:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		
 261:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Host_VBUS_Auto_Off();
 262:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_OTGPAD_Off();
 263:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 264:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Host_VBUS_Manual_Enable();
 265:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Host_VBUS_Manual_On();
 266:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		
 267:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_SRPI);
 268:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_BCERRI);
 269:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 270:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 271:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** }
 158               		.loc 1 271 1 is_stmt 0 view .LVU59
 159 007e 0895      		ret
 160               		.cfi_endproc
 161               	.LFE66:
 163               		.section	.text.USB_Init,"ax",@progbits
 164               	.global	USB_Init
 166               	USB_Init:
 167               	.LFB64:
  57:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 168               		.loc 1 57 1 is_stmt 1 view -0
 169               		.cfi_startproc
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
  99:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 174               		.loc 1 99 2 view .LVU61
 175 0000 0E94 0000 		call USB_ResetInterface
 176               	.LVL4:
 105:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** }
 177               		.loc 1 105 2 view .LVU62
 105:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** }
 178               		.loc 1 105 20 is_stmt 0 view .LVU63
 179 0004 81E0      		ldi r24,lo8(1)
 180 0006 8093 0000 		sts USB_IsInitialized,r24
 181               	/* epilogue start */
 106:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 182               		.loc 1 106 1 view .LVU64
 183 000a 0895      		ret
 184               		.cfi_endproc
 185               	.LFE64:
 187               		.section	.text.USB_ShutDown,"ax",@progbits
 188               	.global	USB_ShutDown
 190               	USB_ShutDown:
 191               	.LFB65:
 109:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 192               		.loc 1 109 1 is_stmt 1 view -0
 193               		.cfi_startproc
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
 110:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Detach();
 198               		.loc 1 110 2 view .LVU66
 199 0000 0E94 0000 		call USB_ResetInterface
 200               	.LVL5:
 111:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Controller_Disable();
 201               		.loc 1 111 2 view .LVU67
 202               	.LBB34:
 203               	.LBI34:
 229:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 204               		.loc 2 229 23 view .LVU68
 205               	.LBB35:
 231:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 206               		.loc 2 231 5 view .LVU69
 231:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 207               		.loc 2 231 12 is_stmt 0 view .LVU70
 208 0004 E0EE      		ldi r30,lo8(-32)
 209 0006 F0E0      		ldi r31,0
 210 0008 8081      		ld r24,Z
 211 000a 8160      		ori r24,lo8(1)
 212 000c 8083      		st Z,r24
 213               	.LBE35:
 214               	.LBE34:
 112:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 215               		.loc 1 112 2 is_stmt 1 view .LVU71
 216               	.LBB36:
 217               	.LBI36:
 431:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 218               		.loc 2 431 23 view .LVU72
 219               	.LBB37:
 433:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 220               		.loc 2 433 5 view .LVU73
 433:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 221               		.loc 2 433 13 is_stmt 0 view .LVU74
 222 000e E8ED      		ldi r30,lo8(-40)
 223 0010 F0E0      		ldi r31,0
 224 0012 8081      		ld r24,Z
 225 0014 8F77      		andi r24,lo8(127)
 226 0016 8083      		st Z,r24
 227               	.LBE37:
 228               	.LBE36:
 114:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
 229               		.loc 1 114 2 is_stmt 1 view .LVU75
 230 0018 0E94 0000 		call USB_INT_DisableAllInterrupts
 231               	.LVL6:
 115:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 232               		.loc 1 115 2 view .LVU76
 233 001c 0E94 0000 		call USB_INT_ClearAllInterrupts
 234               	.LVL7:
 121:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_PLL_Off();
 235               		.loc 1 121 2 view .LVU77
 122:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 236               		.loc 1 122 4 view .LVU78
 237               	.LBB38:
 238               	.LBI38:
 367:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 239               		.loc 2 367 23 view .LVU79
 240               	.LBB39:
 369:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 241               		.loc 2 369 5 view .LVU80
 369:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 242               		.loc 2 369 13 is_stmt 0 view .LVU81
 243 0020 19BC      		out 0x29,__zero_reg__
 244               	.LBE39:
 245               	.LBE38:
 124:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 246               		.loc 1 124 2 is_stmt 1 view .LVU82
 247               	.LBB40:
 248               	.LBI40:
 389:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 249               		.loc 2 389 23 view .LVU83
 250               	.LBB41:
 394:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 251               		.loc 2 394 5 view .LVU84
 394:LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 252               		.loc 2 394 13 is_stmt 0 view .LVU85
 253 0022 E3E6      		ldi r30,lo8(99)
 254 0024 F0E0      		ldi r31,0
 255 0026 8081      		ld r24,Z
 256 0028 8160      		ori r24,lo8(1)
 257 002a 8083      		st Z,r24
 258               	.LBE41:
 259               	.LBE40:
 134:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 260               		.loc 1 134 2 is_stmt 1 view .LVU86
 134:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 261               		.loc 1 134 20 is_stmt 0 view .LVU87
 262 002c 1092 0000 		sts USB_IsInitialized,__zero_reg__
 263               	/* epilogue start */
 139:LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 264               		.loc 1 139 1 view .LVU88
 265 0030 0895      		ret
 266               		.cfi_endproc
 267               	.LFE65:
 269               		.text
 270               	.Letext0:
 271               		.file 3 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/DeviceStandardReq.h"
 272               		.file 4 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/USBTask.h"
 273               		.file 5 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/USBInterrupt.h"
 274               		.file 6 "/usr/avr/include/stdint.h"
 275               		.file 7 "LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 USBController.c
     /tmp/ccaSfczl.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccaSfczl.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccaSfczl.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccaSfczl.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccaSfczl.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccaSfczl.s:13     .text.USB_ResetInterface:0000000000000000 USB_ResetInterface
     /tmp/ccaSfczl.s:166    .text.USB_Init:0000000000000000 USB_Init
     /tmp/ccaSfczl.s:190    .text.USB_ShutDown:0000000000000000 USB_ShutDown

UNDEFINED SYMBOLS
USB_INT_DisableAllInterrupts
USB_INT_ClearAllInterrupts
USB_ConfigurationNumber
USB_RemoteWakeupEnabled
USB_CurrentlySelfPowered
USB_IsInitialized
